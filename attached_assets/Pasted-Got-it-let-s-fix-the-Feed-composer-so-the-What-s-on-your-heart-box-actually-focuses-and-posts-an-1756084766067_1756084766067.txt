Got it‚Äîlet‚Äôs fix the Feed composer so the ‚ÄúWhat‚Äôs on your heart?‚Äù box actually focuses and posts, and lock Announcements to admins only. Below is a **copy‚Äëpaste patch** you can drop into your feed composer (or `client/src/pages/feed.tsx` if the composer is inline). It removes the common blockers (overlay intercepting clicks, uncontrolled/controlled mismatch, disabled state leaks), maps the correct enum (`testimony` not `post`), and gates Announcements on role.

---

# 1) Drop‚Äëin composer (replace your current composer with this)

```tsx
// FeedComposer.tsx
import React from "react";

type PostType = "testimony" | "prayer" | "photo" | "announcement";
type Visibility = "members" | "public";
type Scope = "church" | "group";

const ADMIN_ROLES = new Set([
  "SUPER_ADMIN",
  "ORG_OWNER",
  "ORG_ADMIN",
  "ORG_LEADER",
  "ADMIN",
]);

export function FeedComposer({
  authToken,
  currentUser,
  defaultScope = "church",
  onPosted,
}: {
  authToken: string;
  currentUser: { id: string; role?: string | null };
  defaultScope?: Scope;
  onPosted?: () => void;
}) {
  // ‚úÖ Always initialize controlled inputs to empty strings
  const [body, setBody] = React.useState<string>("");
  const [title, setTitle] = React.useState<string>("");
  // ‚úÖ Map visible tab labels to API enums (testimony vs post)
  const [postType, setPostType] = React.useState<PostType>("testimony");
  const [visibility, setVisibility] = React.useState<Visibility>("members");
  const [scope, setScope] = React.useState<Scope>(defaultScope);
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const isAdmin = ADMIN_ROLES.has((currentUser?.role || "").toUpperCase());

  // üîí Hide Announcements if not admin (both UI & logic)
  const allowedTypes: Array<{ label: string; value: PostType }> = [
    { label: "Post", value: "testimony" },
    { label: "Prayer Request", value: "prayer" },
    { label: "Photo", value: "photo" },
    ...(isAdmin ? [{ label: "Announcement", value: "announcement" }] : []),
  ];

  async function handleSubmit(e?: React.FormEvent) {
    e?.preventDefault();
    if (!body.trim()) return;
    setIsSubmitting(true);
    try {
      const res = await fetch("/api/feed/posts", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...(authToken ? { Authorization: `Bearer ${authToken}` } : {}),
        },
        body: JSON.stringify({
          // ‚úÖ API expects these exact enums:
          type: postType, // "testimony" | "prayer" | "photo" | "announcement"
          body: body.trim(),
          title: title.trim() || undefined,
          visibility, // "members" | "public"
          scope, // "church" | "group"
        }),
      });

      if (!res.ok) {
        const text = await res.text();
        throw new Error(`Post failed: ${res.status} ${text}`);
      }

      // Reset
      setBody("");
      setTitle("");
      setPostType("testimony");
      onPosted?.();
    } catch (err) {
      console.error(err);
      alert(
        err instanceof Error ? err.message : "Something went wrong creating the post."
      );
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      // ‚õîÔ∏è Kill accidental click‚Äëeaters: ensure this container does NOT block clicks
      // Remove any parent "pointer-events: none" styles if present.
      style={{ position: "relative" }}
      className="w-full rounded-2xl border border-gray-200 p-4 bg-white"
    >
      {/* Type selector */}
      <div className="flex flex-wrap gap-2 mb-3">
        {allowedTypes.map((t) => (
          <button
            key={t.value}
            type="button"
            onClick={() => setPostType(t.value)}
            className={`px-3 py-1 rounded-full border ${
              postType === t.value ? "border-blue-500" : "border-gray-300"
            }`}
          >
            {t.label}
          </button>
        ))}
      </div>

      {/* Title (optional, shown for announcement & testimony) */}
      {(postType === "announcement" || postType === "testimony") && (
        <input
          type="text"
          placeholder={postType === "announcement" ? "Announcement title" : "Title (optional)"}
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full mb-2 rounded-lg border border-gray-300 px-3 py-2 outline-none focus:ring-2 focus:ring-blue-500"
        />
      )}

      {/* ‚úÖ The textarea fix: ensure it's focusable, above any overlays, and controlled */}
      <textarea
        placeholder="What's on your heart?"
        value={body}
        onChange={(e) => setBody(e.target.value)}
        onFocus={(e) => {
          // helpful debug without being noisy
          // console.log("textarea focus");
        }}
        rows={4}
        className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:ring-2 focus:ring-blue-500"
        style={{
          zIndex: 1, // keep above any decorative layers
          pointerEvents: "auto", // make sure it receives clicks
        }}
        disabled={isSubmitting}
      />

      {/* Visibility / Scope (optional controls, keep defaults if you hide these) */}
      <div className="mt-3 flex flex-wrap gap-3">
        <select
          value={visibility}
          onChange={(e) => setVisibility(e.target.value as Visibility)}
          className="rounded-lg border border-gray-300 px-2 py-1"
        >
          <option value="members">Members</option>
          <option value="public">Public</option>
        </select>

        <select
          value={scope}
          onChange={(e) => setScope(e.target.value as Scope)}
          className="rounded-lg border border-gray-300 px-2 py-1"
        >
          <option value="church">Whole Church</option>
          <option value="group">This Group</option>
        </select>

        <button
          type="submit"
          disabled={!body.trim() || isSubmitting}
          className={`ml-auto rounded-lg px-4 py-2 ${
            !body.trim() || isSubmitting
              ? "bg-gray-300 cursor-not-allowed"
              : "bg-blue-600 text-white"
          }`}
        >
          {isSubmitting ? "Sharing..." : "Share"}
        </button>
      </div>
    </form>
  );
}
```

**How to use it:**

```tsx
// client/src/pages/feed.tsx
import { FeedComposer } from "../components/FeedComposer";
// ...your imports

export default function FeedPage() {
  const authToken = /* wherever you store it (supabase/session/jwt) */;
  const currentUser = /* { id, role } pulled from your auth/user hook */;

  return (
    <div className="max-w-2xl mx-auto space-y-6">
      <FeedComposer
        authToken={authToken}
        currentUser={currentUser}
        defaultScope="church"
        onPosted={() => {
          // refetch your feed list here
        }}
      />
      {/* your feed list below */}
    </div>
  );
}
```

---

# 2) Frontend gotchas this fixes

* **Invisible overlay blocking clicks**: we force `pointerEvents: 'auto'` on the textarea and give it a small `z-index`. If a parent has `pointer-events: none`, remove it or confine it to decorative layers only.
* **Controlled vs uncontrolled**: `value` defaults to empty string. Undefined makes React treat it weirdly and can kill focus behavior.
* **Disabled leakage**: only disable while submitting. If you tied `disabled` to a broader ‚Äúauth loading‚Äù state, it can lock the field forever.
* **Enum mismatch**: Selecting ‚ÄúPost‚Äù now submits `testimony` which your API accepts.

---

# 3) Server‚Äëside permissions (Announcements)

You‚Äôre right to **hide the Announcement option for regular members**. Keep **both**:

1. **UI gate** (already in the composer)
2. **API gate** in your `/api/feed/posts` handler:

```ts
// pseudo in your API handler
if (body.type === "announcement" && !ADMIN_ROLES.has(user.role)) {
  return res.status(403).json({ error: "Announcements are admin-only." });
}
```

---

# 4) Quick diagnostics (60 seconds)

If the field still won‚Äôt click after pasting the composer:

1. **Check for an overlay** in the browser console:

   ```js
   // click right on the textarea location, then:
   document.elementFromPoint(window.innerWidth/2, window.innerHeight/2)
   ```

   If it‚Äôs not the `<textarea>`, something is on top. Remove or lower its z-index, or set that container‚Äôs `pointer-events: none`.

2. **DevTools** ‚Üí Elements: hover the textarea and toggle the ‚Äú\:hov‚Äù panel to force `:focus`. If it won‚Äôt get focus, a parent is likely disabling it.

3. **Network tab**: after clicking Share, confirm POST to `/api/feed/posts` with payload `{ type: "testimony", ... }` and a `200` response.

---

# 5) Photo posts

If photo posts need a file input, keep the `body` for caption and add:

```tsx
<input
  type="file"
  accept="image/*"
  onChange={handleFilePick}
/>
```

Then send your upload first (to S3/Storage), get a URL, and include it in the same `/api/feed/posts` payload (e.g., `photoUrl`), or use a dedicated upload endpoint‚Äîwhichever your backend expects.

---

# 6) Summary on the policy

* **Announcements**: admin roles only (agree 100 percent). UI hides the option; API enforces it.
* **Members**: can create Posts (`testimony`), Prayer Requests, and Photos.

---

If you paste the composer above and your container still doesn‚Äôt focus, the culprit is almost certainly a parent layer with `position:absolute` + higher `z-index` or `pointer-events:none/auto` setup. Remove that layer or give the composer container a higher `z-index` than any decorative layers.
